generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
  model User {
  id        String          @id @default(cuid())
  email     String          @unique
  password  String
  profile   PlayerProfile?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

    // Uncomment or add additional fields as needed
    // name          String?
    // emailVerified DateTime?
    // image         String?
    // accounts      Account[]
    // sessions      Session[]
    // Authenticator Authenticator[]
  }
 
model PlayerProfile {
  id            String    @id @default(cuid())
  username      String?
  userId        String    @unique
  currentGameId String?   
  currentGame   Game?     @relation("CurrentGame", fields: [currentGameId], references: [id])
  gameHistory   String?
  user          User?     @relation(fields: [userId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  gamesAsPlayer1 Game[] @relation("Player1")
  gamesAsPlayer2 Game[] @relation("Player2")
}

model Game {
  id               String          @id @default(cuid())
  gameId           String          @unique
  gameState        String
  player1Id        String
  player2Id        String
  player1SocketId  String
  player2SocketId  String
  player1Profile   PlayerProfile?  @relation("Player1", fields: [player1Id], references: [userId])
  player2Profile   PlayerProfile?  @relation("Player2", fields: [player2Id], references: [userId])
  profiles         PlayerProfile[] @relation("CurrentGame")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
  expiresAt        DateTime
}


model ActiveSession {
  id        Int      @id @default(autoincrement())
  playerId  String
  socketId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
// model Account {
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?
 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@id([provider, providerAccountId])
// }
 
// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
 
// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime
 
//   @@id([identifier, token])
// }
 
// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@id([userId, credentialID])
// }